import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(_name_)

# Estados da conversa
NOME, EMAIL, TELEFONE, IDADE, TESTE = range(5)

# Perguntas do teste
PERGUNTAS = [
    {
        "numero": 1,
        "pergunta": "Na escola voc√™ prefere/preferia assuntos ligados a:",
        "opcoes": [
            "a) Arte, esportes e atividades extracurriculares",
            "b) Biologia e gen√©tica",
            "c) Ci√™ncias humanas e idiomas",
            "d) Ci√™ncias exatas"
        ]
    },
    {
        "numero": 2,
        "pergunta": "Voc√™ prefere levar sua vida:",
        "opcoes": [
            "a) Com pouca rotina e poucas regras",
            "b) Com regras e disciplinas",
            "c) Interagindo com todo tipo de pessoa",
            "d) Com muita autonomia: 'na sua'"
        ]
    },
    {
        "numero": 3,
        "pergunta": "Voc√™ se descreveria como uma pessoa:",
        "opcoes": [
            "a) Impulsiva e um tanto aventureira",
            "b) Cautelosa e respons√°vel",
            "c) Entusiasmada e muito amiga",
            "d) Calma e diferente da maioria"
        ]
    },
    {
        "numero": 4,
        "pergunta": "Voc√™ se considera uma pessoa:",
        "opcoes": [
            "a) Pr√°tica e h√°bil para improvisar",
            "b) Batalhadora que sabe o que quer",
            "c) Preocupada com quest√µes humanas",
            "d) Capacitada para criar e inventar"
        ]
    },
    {
        "numero": 5,
        "pergunta": "De quais caracter√≠sticas voc√™ sente orgulho:",
        "opcoes": [
            "a) Aud√°cia e facilidade para lidar com o inesperado",
            "b) Senso de dever e capacidade de dar exemplo",
            "c) Idealismo e disposi√ß√£o para compreender os outros",
            "d) Engenhosidade e rapidez mental"
        ]
    },
    {
        "numero": 6,
        "pergunta": "Costuma confiar mais em:",
        "opcoes": [
            "a) Percep√ß√£o imediata",
            "b) Costumes e tradi√ß√µes",
            "c) Intui√ß√£o",
            "d) Raz√£o e l√≥gica"
        ]
    },
    {
        "numero": 7,
        "pergunta": "Quase sempre voc√™ gosta de:",
        "opcoes": [
            "a) Causar impacto: os holofotes o atraem",
            "b) Ser visto como um membro valioso de um grupo",
            "c) Sonhar em transformar o mundo",
            "d) Desvendar um enigma ou inventar algo √∫til"
        ]
    },
    {
        "numero": 8,
        "pergunta": "A vida √© mais interessante quando voc√™ tem:",
        "opcoes": [
            "a) Desafios e situa√ß√µes que mudam com o tempo",
            "b) Seguran√ßa, emprego garantido, integra√ß√£o social",
            "c) Possibilidade de fazer algo para mudar o mundo",
            "d) Possibilidade de ir al√©m do que j√° √© conhecido"
        ]
    },
    {
        "numero": 9,
        "pergunta": "Voc√™ gostaria de ser:",
        "opcoes": [
            "a) Um craque na profiss√£o que escolher",
            "b) Um executivo bem-sucedido",
            "c) Um profissional de prest√≠gio",
            "d) Um especialista ou cientista"
        ]
    },
    {
        "numero": 10,
        "pergunta": "Voc√™ √© muito bom(boa) lidando com:",
        "opcoes": [
            "a) Ferramentas, instrumentos, equipamentos",
            "b) Controle do tempo, comando e execu√ß√£o",
            "c) Pessoas de todos os n√≠veis culturais e sociais",
            "d) Sistemas de constru√ß√£o (material ou mental)"
        ]
    },
    {
        "numero": 11,
        "pergunta": "Antes de agir, voc√™ analisa:",
        "opcoes": [
            "a) Vantagens imediatas",
            "b) Experi√™ncias j√° vividas",
            "c) As possibilidades futuras",
            "d) As condi√ß√µes e consequ√™ncias"
        ]
    },
    {
        "numero": 12,
        "pergunta": "Gosta quando as pessoas:",
        "opcoes": [
            "a) O surpreendem com um presente",
            "b) Expressam gratid√£o por algo que fez",
            "c) Reconhecem sua personalidade singular",
            "d) Reconhecem sua intelig√™ncia"
        ]
    },
    {
        "numero": 13,
        "pergunta": "Voc√™ costuma abra√ßar um novo projeto:",
        "opcoes": [
            "a) Com a cara e a coragem",
            "b) Guiado pela experi√™ncia",
            "c) Confiando na intui√ß√£o e na criatividade",
            "d) Depois de verificar todas as vari√°veis"
        ]
    },
    {
        "numero": 14,
        "pergunta": "Geralmente voc√™ prefere agir:",
        "opcoes": [
            "a) No calor do momento",
            "b) Com seguran√ßa e conforme o costume",
            "c) Quando est√° inspirado",
            "d) Quando um problema o desafia"
        ]
    },
    {
        "numero": 15,
        "pergunta": "Voc√™ fica motivado(a) quando:",
        "opcoes": [
            "a) Tem a oportunidade de superar obst√°culos",
            "b) Experimenta estabilidade na vida profissional",
            "c) Harmonia e inspira√ß√£o guiam a atividade",
            "d) H√° liberdade para projetar o futuro"
        ]
    },
    {
        "numero": 16,
        "pergunta": "Em atividades de grupos, voc√™ prefere:",
        "opcoes": [
            "a) As desafiadoras, que exigem a√ß√£o r√°pida",
            "b) Administrar os recursos dispon√≠veis",
            "c) Motivar as pessoas para darem o melhor de si",
            "d) Descartar logo o que n√£o funciona"
        ]
    },
    {
        "numero": 17,
        "pergunta": "Liderar √© uma atividade que gosta de exercer:",
        "opcoes": [
            "a) Por pouco tempo e dependendo da situa√ß√£o",
            "b) Quando pode comandar do come√ßo ao fim",
            "c) Quando √© preciso identificar e reunir talentos",
            "d) Quando o racioc√≠nio estrat√©gico √© necess√°rio"
        ]
    },
    {
        "numero": 18,
        "pergunta": "Em uma escola voc√™ gostaria de ser:",
        "opcoes": [
            "a) Professor de educa√ß√£o f√≠sica",
            "b) Diretor",
            "c) Professor de literatura",
            "d) Professor de matem√°tica ou f√≠sica"
        ]
    },
    {
        "numero": 19,
        "pergunta": "√â um elogio quando se referem a voc√™ como:",
        "opcoes": [
            "a) Corajoso, otimista e divertido",
            "b) Cauteloso, respons√°vel e aplicado",
            "c) Harmonioso, √≠ntegro e s√°bio",
            "d) Uma mente brilhante"
        ]
    },
    {
        "numero": 20,
        "pergunta": "Frases que t√™m a ver com voc√™:",
        "opcoes": [
            "a) 'Deixo a vida me levar'",
            "b) 'Manda quem pode, obedece quem tem ju√≠zo'",
            "c) 'Para seu pr√≥prio interesse, seja verdadeiro'",
            "d) 'Penso, logo existo'"
        ]
    }
]

# Resultados dos perfis
PERFIS = {
    'A': {
        'titulo': 'üéØ PERFIL A - Din√¢mico e En√©rgico',
        'descricao': 'A principal caracter√≠stica das pessoas do tipo A √© sua energia e dinamismo. Elas t√™m predile√ß√£o por atividades e novidades, demonstrando habilidades f√≠sicas e uma √≥tima comunica√ß√£o corporal. Geralmente evitam a monotonia e encaram o trabalho como uma grande fonte de satisfa√ß√£o e alegria.',
        'carreiras': ['Anestesista', 'Ator', 'Cineasta', 'Chefe de cozinha', 'Cirurgi√£o', 'Core√≥grafo', 'Dan√ßarino', 'Dermatologista', 'Estilista', 'Esportista', 'Guia de turismo', 'Instrumentador cir√∫rgico', 'Jornalista', 'M√©dico cl√≠nico', 'M√∫sico', 'Paisagista', 'Personal trainer', 'Personal stylist', 'Piloto', 'Publicit√°rio', 'Roteirista']
    },
    'B': {
        'titulo': 'üíº PERFIL B - Organizado e Respons√°vel',
        'descricao': 'Comando e responsabilidades s√£o duas palavras que definem as pessoas do tipo B. Elas gostam de lidar com fatos, quantidades, an√°lises, organiza√ß√£o e planejamento. O tipo B trabalha duro e prefere profiss√µes que lhes proporcione status e possibilidade de crescimento.',
        'carreiras': ['Administra√ß√£o', 'Advogado', 'Assistente social', 'Bibliotec√°rio', 'Delegado', 'Engenheiro mec√¢nico/qu√≠mico', 'Juiz de direito', 'Pastor/Padre/Rabino', 'Policial', 'Promotor p√∫blico', 'Defensor p√∫blico']
    },
    'C': {
        'titulo': '‚ù§Ô∏è PERFIL C - Humanista e Intuitivo',
        'descricao': 'Facilmente reconhecidos por seu entusiasmo e interesse nas rela√ß√µes humanas, as pessoas do tipo C t√™m a intui√ß√£o como seu ponto forte. Muitas endere√ßam seus esfor√ßos e talentos para o desenvolvimento intelectual de alunos e colegas de trabalho.',
        'carreiras': ['Artista pl√°stico', 'Dramaturgo', 'Educador', 'Escritor', 'Fil√≥sofo', 'Jornalista', 'Pedagogo', 'Tradutor', 'Professor', 'Psic√≥logo', 'Psiquiatra', 'Soci√≥logo', 'Terapeuta ocupacional']
    },
    'D': {
        'titulo': 'üß† PERFIL D - Anal√≠tico e Estrat√©gico',
        'descricao': 'S√£o intuitivos, mas em vez de se preocupar com as pessoas, costumam focar seus interesses em grandes √°reas do conhecimento como a ci√™ncia e tecnologia. Apresentam not√°vel capacidade para identificar problemas concretos e resolv√™-los, bem como para o racioc√≠nio abstrato.',
        'carreiras': ['Analista de sistemas', 'Antrop√≥logo', 'Arquiteto', 'Astr√¥nomo', 'Criador de software', 'Designer industrial', 'Economista', 'Engenheiro', 'F√≠sico', 'CEO', 'Matem√°tico', 'Militar', 'Ocean√≥grafo', 'Pesquisador', 'Qu√≠mico', 'Maestro', 'Urbanista', 'Zo√≥logo']
    }
}

# Fun√ß√£o para conectar ao Google Sheets
def conectar_google_sheets():
    try:
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
        client = gspread.authorize(creds)
        sheet = client.open('Teste Vocacional - Respostas').sheet1
        return sheet
    except Exception as e:
        logger.error(f"Erro ao conectar ao Google Sheets: {e}")
        return None

# Comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    mensagem_boas_vindas = (
        "üéì BEM-VINDO AO TESTE VOCACIONAL! üéì\n\n"
        "Esse teste n√£o tem respostas certas ou erradas, ele serve para te ajudar "
        "a se conhecer melhor, descobrir o que voc√™ gosta de fazer, suas habilidades "
        "e qual tipo de trabalho combina mais com voc√™.\n\n"
        "üåü Lembre-se: o primeiro emprego √© uma oportunidade de aprendizado e crescimento. "
        "O mais importante √© identificar √°reas onde voc√™ pode se sentir bem, desenvolver "
        "seus talentos e abrir portas para o futuro.\n\n"
        "‚úçÔ∏è Responda com sinceridade, pense em voc√™, no que realmente gosta e acredita.\n\n"
        "Vamos come√ßar! Primeiro, preciso de algumas informa√ß√µes suas.\n\n"
        "üìù Qual √© o seu nome completo?"
    )
    await update.message.reply_text(mensagem_boas_vindas, parse_mode='Markdown')
    return NOME

# Coletar nome
async def coletar_nome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['nome'] = update.message.text
    await update.message.reply_text("üìß Qual √© o seu e-mail?", parse_mode='Markdown')
    return EMAIL

# Coletar email
async def coletar_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['email'] = update.message.text
    await update.message.reply_text("üì± Qual √© o seu telefone?", parse_mode='Markdown')
    return TELEFONE

# Coletar telefone
async def coletar_telefone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['telefone'] = update.message.text
    await update.message.reply_text("üéÇ Qual √© a sua idade?", parse_mode='Markdown')
    return IDADE

# Coletar idade e iniciar teste
async def coletar_idade(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['idade'] = update.message.text
    context.user_data['respostas'] = {}
    context.user_data['pontuacao'] = {'A': 0, 'B': 0, 'C': 0, 'D': 0}
    context.user_data['pergunta_atual'] = 0
    
    await update.message.reply_text(
        "‚úÖ √ìtimo! Agora vamos come√ßar o teste.\n\n"
        "S√£o 20 perguntas. Para cada pergunta, escolha a alternativa que mais combina com voc√™.\n\n"
        "Vamos l√°! üöÄ",
        parse_mode='Markdown'
    )
    
    return await enviar_pergunta(update, context)

# Enviar pergunta
async def enviar_pergunta(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pergunta_num = context.user_data['pergunta_atual']
    
    if pergunta_num >= len(PERGUNTAS):
        return await finalizar_teste(update, context)
    
    pergunta = PERGUNTAS[pergunta_num]
    
    keyboard = []
    for opcao in pergunta['opcoes']:
        letra = opcao[0].upper()
        keyboard.append([InlineKeyboardButton(opcao, callback_data=f"resp_{letra}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    texto = f"Pergunta {pergunta['numero']}/20\n\n{pergunta['pergunta']}"
    
    if update.callback_query:
        await update.callback_query.message.reply_text(texto, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(texto, reply_markup=reply_markup, parse_mode='Markdown')
    
    return TESTE

# Processar resposta
async def processar_resposta(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    resposta = query.data.split('_')[1]
    pergunta_num = context.user_data['pergunta_atual']
    
    context.user_data['respostas'][pergunta_num] = resposta
    context.user_data['pontuacao'][resposta] += 1
    context.user_data['pergunta_atual'] += 1
    
    await query.edit_message_text(f"‚úÖ Resposta registrada: {resposta}")
    
    return await enviar_pergunta(update, context)

# Finalizar teste
async def finalizar_teste(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pontuacao = context.user_data['pontuacao']
    perfil_resultado = max(pontuacao, key=pontuacao.get)
    
    perfil = PERFIS[perfil_resultado]
    
    # Salvar dados no Google Sheets
    sheet = conectar_google_sheets()
    if sheet:
        try:
            dados = [
                datetime.now().strftime('%d/%m/%Y %H:%M:%S'),
                context.user_data['nome'],
                context.user_data['email'],
                context.user_data['telefone'],
                context.user_data['idade'],
                perfil_resultado,
                pontuacao['A'],
                pontuacao['B'],
                pontuacao['C'],
                pontuacao['D'],
                ', '.join([f"Q{k+1}:{v}" for k, v in context.user_data['respostas'].items()])
            ]
            sheet.append_row(dados)
        except Exception as e:
            logger.error(f"Erro ao salvar no Google Sheets: {e}")
    
    # Montar mensagem de resultado
    resultado_msg = (
        f"üéâ TESTE CONCLU√çDO! üéâ\n\n"
        f"{perfil['titulo']}\n\n"
        f"üìä Sua pontua√ß√£o:\n"
        f"A: {pontuacao['A']} | B: {pontuacao['B']} | C: {pontuacao['C']} | D: {pontuacao['D']}\n\n"
        f"üìù Descri√ß√£o do seu perfil:\n{perfil['descricao']}\n\n"
        f"üíº Carreiras sugeridas:\n"
    )
    
    for i, carreira in enumerate(perfil['carreiras'], 1):
        resultado_msg += f"{i}. {carreira}\n"
    
    resultado_msg += (
        f"\n‚ú® Lembre-se: Este √© apenas um guia! Voc√™ pode explorar diferentes √°reas "
        f"e descobrir novos interesses ao longo da sua jornada profissional.\n\n"
        f"Obrigado por participar! üöÄ"
    )
    
    if update.callback_query:
        await update.callback_query.message.reply_text(resultado_msg, parse_mode='Markdown')
    else:
        await update.message.reply_text(resultado_msg, parse_mode='Markdown')
    
    return ConversationHandler.END

# Cancelar
async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå Teste cancelado. Use /start para come√ßar novamente.")
    return ConversationHandler.END

def main():
    # Token do bot (voc√™ vai colocar o seu)
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, coletar_nome)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, coletar_email)],
            TELEFONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, coletar_telefone)],
            IDADE: [MessageHandler(filters.TEXT & ~filters.COMMAND, coletar_idade)],
            TESTE: [CallbackQueryHandler(processar_resposta)],
        },
        fallbacks=[CommandHandler('cancelar', cancelar)],
    )
    
    application.add_handler(conv_handler)
    
    application.run_polling()

if _name_ == '_main_':
    main()